{"ast":null,"code":"import _objectSpread from \"/Users/benjaminfranck/Google Drive/COURS CODING/react-course/crwn-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyA-rtm3WH80Vtf4vX1-ZLcttJIZAAqWFQo\",\n  authDomain: \"crwn-db-82b2c.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-82b2c.firebaseio.com\",\n  projectId: \"crwn-db-82b2c\",\n  storageBucket: \"crwn-db-82b2c.appspot.com\",\n  messagingSenderId: \"835634229978\",\n  appId: \"1:835634229978:web:51eb3891e727e856cdabe3\",\n  measurementId: \"G-VTQ0MZCZML\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('Error creating user:', error.message);\n    }\n  }\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/benjaminfranck/Google Drive/COURS CODING/react-course/crwn-app/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWE,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AAAA,UACZC,WADY,GACUT,QADV,CACZS,WADY;AAAA,UACCC,KADD,GACUV,QADV,CACCU,KADD;AAEnB,UAAMC,SAAS,GAAI,IAAIC,IAAJ,EAAnB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAOD,KARD,CAQC,OAAMa,KAAN,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAqCF,KAAK,CAACG,OAA3C;AACD;AAEF;AACF,CAtBM;AAwBP5B,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAGP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyA-rtm3WH80Vtf4vX1-ZLcttJIZAAqWFQo\",\n    authDomain: \"crwn-db-82b2c.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-82b2c.firebaseio.com\",\n    projectId: \"crwn-db-82b2c\",\n    storageBucket: \"crwn-db-82b2c.appspot.com\",\n    messagingSenderId: \"835634229978\",\n    appId: \"1:835634229978:web:51eb3891e727e856cdabe3\",\n    measurementId: \"G-VTQ0MZCZML\"\n  };\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return; \n    \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n    if(!snapShot.exists) {\n      const {displayName, email} = userAuth;\n      const createdAt =  new Date();\n\n      try {\n        await userRef.set({\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        })\n\n      }catch(error) {\n        console.log('Error creating user:' , error.message)\n      }\n\n    }\n  };\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth()\n  export const firestore = firebase.firestore()\n\n  const provider = new firebase.auth.GoogleAuthProvider()\n  provider.setCustomParameters({prompt: 'select_account'})\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n\n  export default firebase; "]},"metadata":{},"sourceType":"module"}